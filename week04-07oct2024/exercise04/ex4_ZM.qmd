---
title: "week4_ZM"
author: "Zoe Marolf"
date: 9/10/24
format: 
  html: 
    self-contained: true
    toc: true
editor_options: 
  chunk_output_type: console
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Exploratory Data Analysis
Do an exploratory data analysis of a matrix of expression values. The data consists of expression values for samples that were treated with DMSO and TSA. The samples were measured using three technologies: bulk, IFC96, IFC800. See the two RDS files counts.RDS and phenodata.RDS.

The experiment has two experimental factors “Treatment” and “Technology”. Treatment has two levels, Technology has three levels. Samples that have the same combination of Treatment & Technology are replicates.

## Data Import
```{r}
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggcorrplot)
library(pheatmap)

x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)
```

## Compute and visualize basic statistics on the experimental design
How many replicates are there for each combination of factor levels? How many genes have an expression value above 0 in each sample? Are there systematic differences between the samples in the different conditions (treatment & technology). Visualize the following statistics per sample:

number of detected genes

total sum of counts per sample (serves as a proxy for the number of sequenced reads per sample)

Color the samples by the experimental condition.

```{r}
table(anno) # replicates for each combination of factor levels


detected_genes_per_sample <- colSums(x > 0)
counts_per_sample <- colSums(x)

anno$sample <- rownames(anno)
x_long <- as.data.frame(t(x))
x_long$sample <- rownames(x_long)
combined_data <- merge(anno, x_long, by = "sample")
combined_data <- data.frame(detected_genes_per_sample, counts_per_sample, combined_data)

ggplot(combined_data, aes(x = Treatment, y = detected_genes_per_sample, fill = Technology)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Number of Detected Genes per Sample",
       x = "Experimental Condition (bulk, ifc96, ifc800)",
       y = "Number of Detected Genes",
       fill = "Condition (DMSO/TSA)") +
  theme_minimal()

ggplot(combined_data, aes(x = Treatment, y = counts_per_sample, fill = Technology)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Sum of Counts per Sample",
       x = "Experimental Condition (bulk, ifc96, ifc800)",
       y = "Sum of Counts",
       fill = "Condition (DMSO/TSA)") +
  theme_minimal()
```

## Normalize the data and transform the data to log-scale
To ensure that the total sum of all columns are identical, we divide each gene count in a sample by the total counts of that sample (and scale by 1000). Then we transform the data to log-scale.
Note: I removed genes with low expression and scaled everything by 1000 because otherwise I got violin plots where everything was zero. Maybe I made some other mistake, I'm not sure.

``` {r}
# Filter out genes with low expression
filtered_x <- x[rowMeans(x > 0) > 0.8, ]

norm_x <- sweep(filtered_x, 2, colSums(filtered_x), "/") * 1000

boxplot(norm_x, main = "Boxplot of Normalized Expression Data", outline = FALSE)

log_norm_x <- log1p(norm_x)
```

## Visualize the distribution of the expression values
Use violin plots and boxplots to visualize the distribution of the expression values. Aggregate the replicates in the same experimental group into one average sample, and plot the averaged sample. Color by experimental factors.
```{r}
norm_x_long <- as.data.frame(t(log_norm_x))
norm_x_long$sample <- rownames(norm_x_long)
combined_data <- merge(anno, norm_x_long, by = "sample")

# aggregate replicates in the same experimental group into one average sample
long_combined_data <- combined_data %>%
  pivot_longer(cols = -(1:3), names_to = "Gene", values_to = "Expression")

aggregated_data <- long_combined_data %>%
  group_by(Treatment, Technology, Gene) %>%
  summarise(Average_Expression = mean(Expression, na.rm = TRUE)) %>%
  ungroup()

ggplot(aggregated_data, aes(x = interaction(Technology, Treatment), y = Average_Expression, fill = Technology)) +
  geom_violin(trim = FALSE, alpha = 0.5) +  # Violin plot for density distribution
  geom_boxplot(width = 0.1, position = position_dodge(0.9), outlier.shape = NA) +  # Overlay boxplots
  labs(x = "Experimental Group", y = "Average Log-Normalized Expression") +  # Axis labels
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for clarity
  scale_fill_brewer(palette = "Set1") +  # Color by Treatment
  ggtitle("Violin and Boxplots of Log-Normalized Expression Values")
```

## Most variable genes
Identify the 500 most variable genes (with largest variance across samples).
```{r}
gene_variances <- long_combined_data %>%
  group_by(Gene) %>%
  summarise(Variance = var(Expression, na.rm = TRUE)) # calculate variances

top_var_genes <- gene_variances %>%
  arrange(desc(Variance)) %>%
  slice_head(n = 500) %>%
  pull(Gene) # choose top 500

top_var_combined_data <- long_combined_data %>%
  filter(Gene %in% top_var_genes) # subset original data matrix to only include top 500 genes
```

## Sample correlations
Compute and visualize the sample-to-sample correlations
```{r}
subset_x <- x[rownames(x) %in% top_var_genes,]

corr_matrix <- cor(subset_x)
anno <- anno[rownames(corr_matrix), , drop=FALSE]
anno_col <- anno[, c("Treatment", "Technology")]

annotation_colors <- list(
  Treatment = c("DMSO" = "orange", "TSA" = "yellow")  # Assign colors for DMSO and TSA
)

pheatmap(corr_matrix, 
         annotation_col = anno_col,        
         annotation_colors = annotation_colors,
         show_colnames = FALSE, 
         show_rownames = FALSE,
         cluster_rows = TRUE,  # Cluster rows (genes)
         cluster_cols = TRUE, # Cluster columns (samples)
         main = "Correlation Matrix with Treatment Annotations",
         color = colorRampPalette(c("pink", "white", "green"))(100)  # Color palette for correlations
)
```

## Clustering
Compute and visualize a hierarchical clustering of the samples, use the method hclust. I used Euclidean distance and complete linkage because they looked alright but I'm not sure what is appropriate.
```{r}
scaled_x <- scale(subset_x)
dist_matrix <- dist(scaled_x, method = "euclidean")
hclust_avg <- hclust(dist_matrix, method = "average")

# prepare annotations

pheatmap(scaled_x, 
         clustering_distance_cols = "euclidean",  # Distance metric for cols (samples)
         clustering_method = "complete",  # Linkage method
         annotation_col = anno_col,  # Annotations for the samples
         cluster_cols = TRUE,  
         show_colnames = FALSE, 
         show_rownames = FALSE,  
         main = "Hierarchical Clustering with Sample Annotations"
)
```

## Heatmap
Use the package pheatmap to generate a heatmap of the expression data.
```{r}
annotation_colors <- list(
  Treatment = c("DMSO" = "lightblue", "TSA" = "pink"),  # Treatment colors
  Technology = c("bulk" = "orange", "IFC800" = "blue", "IFC96" = "lightgreen")  # Technology colors
)

heatmap <- pheatmap(subset_x,
                    main = "Heatmap of Top 500 Most Variable Genes",
                    color = colorRampPalette( c("#2166ac", "white", "#b2182b"))(100),
                    cluster_rows = TRUE,
                    cluster_cols = TRUE,
                    scale = "row",
                    annotation_col = anno_col,
                    annotation_colors = annotation_colors,
                    fontsize = 10, 
                    fontsize_row = 5, 
                    fontsize_col = 5
)
```

